"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 60 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó.
–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ 34 –∏ 45 —Å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏.
"""

import pandas as pd
import numpy as np
import os
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

def generate_synthetic_clients():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ 34 –∏ 45 –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ 60."""
    
    print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ 34 –∏ 45...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    existing_clients = pd.read_csv('../data/clients.csv')
    existing_transactions = pd.read_csv('../data/transactions.csv')
    existing_transfers = pd.read_csv('../data/transfers.csv')
    
    # –ö–ª–∏–µ–Ω—Ç 34: FX-–∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "–û–±–º–µ–Ω –≤–∞–ª—é—Ç")
    client_34 = {
        'client_code': 34,
        'name': '–ê–π–¥–∞—Ä',
        'status': '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
        'age': 35,
        'city': '–ê–ª–º–∞—Ç—ã',
        'avg_monthly_balance_KZT': 800000  # –í—ã—Å–æ–∫–∏–π –¥–ª—è FX
    }
    
    # –ö–ª–∏–µ–Ω—Ç 45: Travel —ç–Ω—Ç—É–∑–∏–∞—Å—Ç (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π")
    client_45 = {
        'client_code': 45,
        'name': '–î–∏–∞–Ω–∞',
        'status': '–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
        'age': 27,
        'city': '–ê—Å—Ç–∞–Ω–∞',
        'avg_monthly_balance_KZT': 400000  # –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∏–π –¥–ª—è travel
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ clients.csv
    new_clients = pd.DataFrame([client_34, client_45])
    updated_clients = pd.concat([existing_clients, new_clients], ignore_index=True)
    updated_clients.to_csv('../data/clients.csv', index=False)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 34 (FX —Ç—Ä–µ–π–¥–µ—Ä)
    transactions_34 = generate_fx_trader_transactions(34)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 45 (Travel —ç–Ω—Ç—É–∑–∏–∞—Å—Ç)
    transactions_45 = generate_travel_enthusiast_transactions(45)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 34 (–º–Ω–æ–≥–æ FX –æ–ø–µ—Ä–∞—Ü–∏–π)
    transfers_34 = generate_fx_trader_transfers(34)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 45 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
    transfers_45 = generate_travel_enthusiast_transfers(45)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    all_transactions = pd.concat([existing_transactions, transactions_34, transactions_45], ignore_index=True)
    all_transfers = pd.concat([existing_transfers, transfers_34, transfers_45], ignore_index=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    all_transactions.to_csv('../data/transactions.csv', index=False)
    all_transfers.to_csv('../data/transfers.csv', index=False)
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—ã 34 (FX —Ç—Ä–µ–π–¥–µ—Ä) –∏ 45 (Travel —ç–Ω—Ç—É–∑–∏–∞—Å—Ç)")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(updated_clients)}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(all_transactions)}")
    print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {len(all_transfers)}")


def generate_fx_trader_transactions(client_code: int) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è FX-–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    
    transactions = []
    base_date = datetime(2025, 6, 1)
    
    # –ú–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±–∏–∑–Ω–µ—Å–æ–º –∏ travel
    categories = [
        ('–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 300, 15000),  # –î–µ–ª–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏
        ('–¢–∞–∫—Å–∏', 200, 8000),              # –ß–∞—Å—Ç—ã–µ –ø–æ–µ–∑–¥–∫–∏
        ('–ê–ó–°', 150, 5000),                # –ê–≤—Ç–æ–º–æ–±–∏–ª—å
        ('–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', 100, 3000),   # –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã
        ('–ö–∏–Ω–æ', 80, 2000),                # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    ]
    
    for i in range(300):  # 300 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 3 –º–µ—Å—è—Ü–∞
        category_idx = np.random.choice(len(categories), p=[0.3, 0.25, 0.2, 0.15, 0.1])
        category_name, max_amt, limit = categories[category_idx]
        
        transaction = {
            'client_code': client_code,
            'name': '–ê–π–¥–∞—Ä',
            'product': '–û–±–º–µ–Ω –≤–∞–ª—é—Ç',  # –•–∏–Ω—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
            'status': '–≤–∏–ø',
            'city': '–ê–ª–º–∞—Ç—ã',
            'date': base_date + timedelta(days=np.random.randint(0, 90)),
            'category': category_name,
            'amount': np.random.uniform(100, max_amt),
            'currency': 'KZT'
        }
        transactions.append(transaction)
    
    return pd.DataFrame(transactions)


def generate_travel_enthusiast_transactions(client_code: int) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è travel —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∞."""
    
    transactions = []
    base_date = datetime(2025, 6, 1)
    
    # –ú–Ω–æ–≥–æ travel-related —Ç—Ä–∞—Ç
    categories = [
        ('–¢–∞–∫—Å–∏', 500, 25000),             # –û—á–µ–Ω—å –º–Ω–æ–≥–æ —Ç–∞–∫—Å–∏
        ('–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 800, 15000),       # –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
        ('–û—Ç–µ–ª–∏', 600, 20000),             # –û—Ç–µ–ª–∏
        ('–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 300, 12000),  # –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ –ø–æ–µ–∑–¥–∫–∞—Ö
        ('–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', 150, 4000),   # –ë–∞–∑–æ–≤—ã–µ
        ('–ö–∏–Ω–æ', 100, 2000),               # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    ]
    
    for i in range(300):  # 300 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 3 –º–µ—Å—è—Ü–∞
        category_idx = np.random.choice(len(categories), p=[0.35, 0.2, 0.2, 0.15, 0.07, 0.03])
        category_name, max_amt, limit = categories[category_idx]
        
        transaction = {
            'client_code': client_code,
            'name': '–î–∏–∞–Ω–∞',
            'product': '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π',  # –•–∏–Ω—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
            'status': '–∑–ø',
            'city': '–ê—Å—Ç–∞–Ω–∞',
            'date': base_date + timedelta(days=np.random.randint(0, 90)),
            'category': category_name,
            'amount': np.random.uniform(200, max_amt),
            'currency': 'KZT'
        }
        transactions.append(transaction)
    
    return pd.DataFrame(transactions)


def generate_fx_trader_transfers(client_code: int) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è FX —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å –≤—ã—Å–æ–∫–æ–π FX –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é."""
    
    transfers = []
    base_date = datetime(2025, 6, 1)
    
    # –¢–∏–ø—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –≤–µ—Å–∞–º–∏
    transfer_types = [
        ('fx_buy', 'out', 50000, 0.25),    # –ú–Ω–æ–≥–æ –ø–æ–∫—É–ø–æ–∫ –≤–∞–ª—é—Ç—ã
        ('fx_sell', 'in', 45000, 0.25),    # –ú–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–∂ –≤–∞–ª—é—Ç—ã
        ('salary_in', 'in', 500000, 0.05),  # –ó–∞—Ä–ø–ª–∞—Ç–∞
        ('card_out', 'out', 20000, 0.15),   # –û–±—ã—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã
        ('p2p_out', 'out', 30000, 0.10),    # P2P –ø–µ—Ä–µ–≤–æ–¥—ã
        ('atm_withdrawal', 'out', 15000, 0.10),  # –°–Ω—è—Ç–∏—è
        ('invest_out', 'out', 100000, 0.05),     # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        ('card_in', 'in', 25000, 0.05),          # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    ]
    
    for i in range(300):  # 300 –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞ 3 –º–µ—Å—è—Ü–∞
        transfer_type, direction, max_amount, weight = np.random.choice(transfer_types, p=[t[3] for t in transfer_types])
        
        transfer = {
            'client_code': client_code,
            'date': base_date + timedelta(days=np.random.randint(0, 90)),
            'type': transfer_type,
            'direction': direction,
            'amount': np.random.uniform(1000, max_amount),
            'currency': 'USD' if 'fx' in transfer_type else 'KZT'
        }
        transfers.append(transfer)
    
    return pd.DataFrame(transfers)


def generate_travel_enthusiast_transfers(client_code: int) -> pd.DataFrame:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è travel —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–∞."""
    
    transfers = []
    base_date = datetime(2025, 6, 1)
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã + –Ω–µ–º–Ω–æ–≥–æ FX –¥–ª—è travel
    transfer_types = [
        ('salary_in', 'in', 400000, 0.15),   # –ó–∞—Ä–ø–ª–∞—Ç–∞
        ('card_out', 'out', 25000, 0.30),    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã
        ('p2p_out', 'out', 20000, 0.15),     # P2P
        ('atm_withdrawal', 'out', 10000, 0.15),  # –°–Ω—è—Ç–∏—è
        ('fx_buy', 'out', 15000, 0.10),      # FX –¥–ª—è –ø–æ–µ–∑–¥–æ–∫
        ('utilities_out', 'out', 8000, 0.10),   # –ö–æ–º–º—É–Ω–∞–ª–∫–∞
        ('card_in', 'in', 15000, 0.05),      # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    ]
    
    for i in range(300):  # 300 –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞ 3 –º–µ—Å—è—Ü–∞
        transfer_type, direction, max_amount, weight = np.random.choice(transfer_types, p=[t[3] for t in transfer_types])
        
        transfer = {
            'client_code': client_code,
            'date': base_date + timedelta(days=np.random.randint(0, 90)),
            'type': transfer_type,
            'direction': direction,
            'amount': np.random.uniform(500, max_amount),
            'currency': 'USD' if 'fx' in transfer_type else 'KZT'
        }
        transfers.append(transfer)
    
    return pd.DataFrame(transfers)


if __name__ == "__main__":
    generate_synthetic_clients()