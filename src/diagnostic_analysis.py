"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.
Senior Data Scientist —É—Ä–æ–≤–µ–Ω—å - –≤—ã—è–≤–ª—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–≥–∏.
"""

import pandas as pd
import numpy as np
import os

def comprehensive_diagnosis():
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã."""
    
    print("üîç === COMPREHENSIVE SYSTEM DIAGNOSIS ===")
    
    # 1. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–•:")
    clients = pd.read_csv('../data/clients.csv')
    transactions = pd.read_csv('../data/transactions.csv')
    transfers = pd.read_csv('../data/transfers.csv')
    
    print(f"–ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(clients)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 60)")
    print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions):,}")
    print(f"–ü–µ—Ä–µ–≤–æ–¥–æ–≤: {len(transfers):,}")
    
    # 2. –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–ª—è benefit calculation)
    print(f"\nüí∞ –ê–ù–ê–õ–ò–ó –ë–ê–õ–ê–ù–°–û–í:")
    print(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {clients['avg_monthly_balance_KZT'].mean():,.0f} ‚Ç∏")
    print(f"–ú–µ–¥–∏–∞–Ω–∞ –±–∞–ª–∞–Ω—Å–∞: {clients['avg_monthly_balance_KZT'].median():,.0f} ‚Ç∏")
    print(f"–ú–∞–∫—Å –±–∞–ª–∞–Ω—Å: {clients['avg_monthly_balance_KZT'].max():,.0f} ‚Ç∏")
    print(f"–ú–∏–Ω –±–∞–ª–∞–Ω—Å: {clients['avg_monthly_balance_KZT'].min():,.0f} ‚Ç∏")
    
    # 3. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if os.path.exists('../data/output_extended.csv'):
        output = pd.read_csv('../data/output_extended.csv')
        print(f"\nüéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print(f"–ö–ª–∏–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(output)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {output['product'].nunique()}/10")
        
        if '_benefit' in output.columns:
            print(f"–°—Ä–µ–¥–Ω—è—è –≤—ã–≥–æ–¥–∞: {output['_benefit'].mean():.1f} ‚Ç∏ (–ö–†–ò–¢–ò–ß–ù–û: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >1000)")
            print(f"–ú–∞–∫—Å –≤—ã–≥–æ–¥–∞: {output['_benefit'].max():.1f} ‚Ç∏")
            print(f"–ú–∏–Ω –≤—ã–≥–æ–¥–∞: {output['_benefit'].min():.1f} ‚Ç∏")
        
        print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–û–î–£–ö–¢–û–í:")
        product_dist = output['product'].value_counts()
        missing_products = []
        for product in ['–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞', '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞', 
                       '–û–±–º–µ–Ω –≤–∞–ª—é—Ç', '–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏', '–î–µ–ø–æ–∑–∏—Ç –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π', 
                       '–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π', '–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏']:
            count = product_dist.get(product, 0)
            if count == 0:
                missing_products.append(product)
            print(f"  {product}: {count} ({count/len(output)*100:.1f}%)")
        
        if missing_products:
            print(f"\n‚ö†Ô∏è –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ü–†–û–î–£–ö–¢–´: {missing_products}")
    
    # 4. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è missing –∫–ª–∏–µ–Ω—Ç–æ–≤
    print(f"\nüîç –ê–ù–ê–õ–ò–ó MISSING –ö–õ–ò–ï–ù–¢–û–í:")
    case1_files = os.listdir('../case 1')
    trans_files = [f for f in case1_files if 'transactions' in f]
    client_ids = [int(f.split('_')[1]) for f in trans_files]
    
    all_expected = set(range(1, 61))
    available = set(client_ids)
    missing = all_expected - available
    
    print(f"–û–∂–∏–¥–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤: 60")
    print(f"–î–æ—Å—Ç—É–ø–Ω–æ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(client_ids)}")
    print(f"Missing –∫–ª–∏–µ–Ω—Ç—ã: {sorted(missing)}")
    
    # 5. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç
    print(f"\nüõçÔ∏è –ê–ù–ê–õ–ò–ó –ö–ê–¢–ï–ì–û–†–ò–ô –¢–†–ê–¢:")
    category_totals = transactions.groupby('category')['amount'].sum().sort_values(ascending=False)
    print("–¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –æ–±—ä–µ–º—É:")
    for cat, amount in category_totals.head().items():
        print(f"  {cat}: {amount:,.0f} ‚Ç∏")
    
    # 6. –ê–Ω–∞–ª–∏–∑ FX –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    print(f"\nüí± –ê–ù–ê–õ–ò–ó FX –ê–ö–¢–ò–í–ù–û–°–¢–ò:")
    fx_transfers = transfers[transfers['type'].isin(['fx_buy', 'fx_sell'])]
    fx_volume = fx_transfers['amount'].sum()
    fx_clients = fx_transfers['client_code'].nunique()
    print(f"–û–±—â–∏–π FX –æ–±—ä–µ–º: {fx_volume:,.0f} ‚Ç∏")
    print(f"FX –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {fx_clients}/58 ({fx_clients/58*100:.1f}%)")
    
    return {
        'clients_count': len(clients),
        'missing_clients': missing,
        'fx_active_ratio': fx_clients/58,
        'avg_balance': clients['avg_monthly_balance_KZT'].mean()
    }

if __name__ == "__main__":
    results = comprehensive_diagnosis()
    print(f"\nüéØ –ö–õ–Æ–ß–ï–í–´–ï FINDINGS:")
    print(f"- –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å {60 - results['clients_count']} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print(f"- FX –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {results['fx_active_ratio']*100:.1f}% –∫–ª–∏–µ–Ω—Ç–æ–≤")
    print(f"- –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {results['avg_balance']:,.0f} ‚Ç∏")