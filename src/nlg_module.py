"""
–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (NLG) –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Jinja2.
"""

import pandas as pd
import jinja2
import re
import logging
from typing import Dict, Any
from config import CONFIG

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å gender_guesser, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
try:
    import gender_guesser.detector as gender
    GENDER_DETECTION_AVAILABLE = True
except ImportError:
    GENDER_DETECTION_AVAILABLE = False
    logging.warning("gender_guesser –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì–µ–Ω–¥–µ—Ä–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—É–∂—Å–∫–æ–π —Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def generate_push_text(client_data: pd.Series, product: str, config: Dict[str, Any]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
    
    Args:
        client_data: –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        product: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        
    Returns:
        –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jinja2 –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å custom —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        env = jinja2.Environment(
            loader=jinja2.FileSystemLoader(config['TEMPLATE_DIR']),
            autoescape=True
        )
        
        # üöÄ –î–æ–±–∞–≤–ª—è–µ–º ultra-–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä—ã
        env.filters['format_money'] = _format_money_filter
        env.filters['lower'] = lambda x: str(x).lower()
        
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
        template_name = _get_template_name(product)
        
        try:
            template = env.get_template(template_name)
        except jinja2.TemplateNotFound:
            logger.warning(f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω")
            template = env.from_string(_get_default_template())
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        context = _prepare_template_context(client_data, product, config)
        
        # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
        text = template.render(context)
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        text = _postprocess_text(text, config)
        
        return text
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {product}: {e}")
        return _generate_fallback_text(client_data, product)


def _get_template_name(product: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∏–º—è —Ñ–∞–π–ª–∞
    template_name = product.lower()
    template_name = template_name.replace(' ', '_')
    template_name = template_name.replace('—ë', '–µ')
    template_name = re.sub(r'[^\w_]', '', template_name)
    return f"{template_name}.jinja"


def _prepare_template_context(client_data: pd.Series, product: str, config: Dict[str, Any]) -> Dict[str, Any]:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞."""
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª
    name = client_data.get('name', '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç')
    first_name = name.split()[0] if name and ' ' in name else name
    gender_info = _detect_gender(first_name)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–≥–æ–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    benefit = _calculate_display_benefit(client_data, product, config)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç
    top_categories = _get_top_spending_categories(client_data)
    
    # –ú–µ—Å—è—Ü –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    month = client_data.get('month', '—ç—Ç–æ–º –º–µ—Å—è—Ü–µ')
    
    # –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = {
        'name': first_name,
        'full_name': name,
        'product': product,
        'benefit': _format_currency(benefit),
        'benefit_raw': benefit,
        'month': month,
        'gender': gender_info,
        'is_female': gender_info['is_female'],
        'is_male': gender_info['is_male'],
        'cat1': top_categories[0] if len(top_categories) > 0 else '–ø–æ–∫—É–ø–∫–∏',
        'cat2': top_categories[1] if len(top_categories) > 1 else '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        'cat3': top_categories[2] if len(top_categories) > 2 else '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã',
        'balance': _format_currency(client_data.get('avg_monthly_balance_KZT', 0)),
        'balance_raw': client_data.get('avg_monthly_balance_KZT', 0),
        'age': client_data.get('age', 0),
        'status': client_data.get('status', ''),
        'city': client_data.get('city', ''),
        'emoji': _get_product_emoji(product)
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    context.update(_get_product_specific_context(client_data, product))
    
    return context


def _detect_gender(first_name: str) -> Dict[str, Any]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏."""
    if not GENDER_DETECTION_AVAILABLE or not first_name:
        return {
            'is_female': False,
            'is_male': True,
            'gender': 'male',
            'ending_verb': '',  # –≤–µ—Ä–Ω—É–ª
            'ending_adj': '—ã–π',  # –≥–æ—Ç–æ–≤—ã–π
            'ending_participle': ''  # –ø–æ–ª—É—á–µ–Ω
        }
    
    try:
        d = gender.Detector()
        detected_gender = d.get_gender(first_name)
        
        is_female = detected_gender in ['female', 'mostly_female']
        is_male = not is_female
        
        # –†—É—Å—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if is_female:
            endings = {
                'ending_verb': '–∞',      # –≤–µ—Ä–Ω—É–ª–∞
                'ending_adj': '–∞—è',      # –≥–æ—Ç–æ–≤–∞—è
                'ending_participle': '–∞' # –ø–æ–ª—É—á–µ–Ω–∞
            }
        else:
            endings = {
                'ending_verb': '',       # –≤–µ—Ä–Ω—É–ª
                'ending_adj': '—ã–π',      # –≥–æ—Ç–æ–≤—ã–π
                'ending_participle': ''  # –ø–æ–ª—É—á–µ–Ω
            }
        
        return {
            'is_female': is_female,
            'is_male': is_male,
            'gender': 'female' if is_female else 'male',
            **endings
        }
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–ª–∞ –¥–ª—è –∏–º–µ–Ω–∏ {first_name}: {e}")
        return _detect_gender('')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º—É–∂—Å–∫–æ–π —Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def _calculate_display_benefit(client_data: pd.Series, product: str, config: Dict[str, Any]) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—ã–≥–æ–¥—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏."""
    balance = client_data.get('avg_monthly_balance_KZT', 0)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ ¬´–º–µ—Å—è—Ü–∞¬ª –∏ –¥–æ–ø. scale –∫–∞–∫ –≤ –¥–≤–∏–∂–∫–µ
    def monthly(val: float) -> float:
        return (val or 0) / 3 / 100
    
    # 1) Travel: 4% –Ω–∞ ¬´–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è¬ª + 4% –Ω–∞ —Ç–∞–∫—Å–∏ (–º–µ—Å—è—Ü)
    travel_monthly = monthly(client_data.get('spend_–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 0) + client_data.get('spend_–û—Ç–µ–ª–∏', 0))
    taxi_monthly = monthly(client_data.get('spend_–¢–∞–∫—Å–∏', 0))
    travel_benefit_m = (travel_monthly + taxi_monthly) * 0.04
    
    # 2) –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è: 2/3/4% –±–∞–∑–æ–≤—ã–π + 4% –ø—Ä–µ–º–∏—É–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–º–∏—Ç 100k/–º–µ—Å
    base_monthly_spend = monthly(sum([
        client_data.get('spend_–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 0),
        client_data.get('spend_–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', 0),
        client_data.get('spend_–ê–ó–°', 0),
        client_data.get('spend_–¢–∞–∫—Å–∏', 0),
        client_data.get('spend_–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 0),
        client_data.get('spend_–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å', 0),
        client_data.get('spend_–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è', 0)
    ]))
    premium_cats_m = monthly(client_data.get('spend_–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 0) +
                              client_data.get('spend_–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è', 0) +
                              client_data.get('spend_–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è', 0))
    if balance >= 6000000:
        tier_rate = 0.04
    elif balance >= 1000000:
        tier_rate = 0.03
    else:
        tier_rate = 0.02
    premium_benefit_m = min(base_monthly_spend * tier_rate + premium_cats_m * 0.04, 100000)
    
    # 3) –ö—Ä–µ–¥–∏—Ç–Ω–∞—è: 10% —Ç–æ–ø‚Äë3 + 10% –æ–Ω–ª–∞–π–Ω (–∏–≥—Ä—ã, –¥–æ—Å—Ç–∞–≤–∫–∞, –∫–∏–Ω–æ)
    spend_map = {
        '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã': client_data.get('spend_–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 0),
        '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è': client_data.get('spend_–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', 0),
        '–ê–ó–°': client_data.get('spend_–ê–ó–°', 0),
        '–¢–∞–∫—Å–∏': client_data.get('spend_–¢–∞–∫—Å–∏', 0),
        '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': client_data.get('spend_–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', 0),
        '–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è': client_data.get('spend_–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è', 0),
        '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å': client_data.get('spend_–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å', 0)
    }
    top3_m = sum(sorted([monthly(v) for v in spend_map.values()], reverse=True)[:3])
    online_m = monthly(client_data.get('spend_–ò–≥—Ä–∞–µ–º –¥–æ–º–∞', 0) + client_data.get('spend_–ï–¥–∏–º –¥–æ–º–∞', 0) + client_data.get('spend_–ö–∏–Ω–æ', 0))
    credit_benefit_m = top3_m * 0.10 + online_m * 0.10
    
    # 4) FX –æ–±–º–µ–Ω: ~0.5% –æ—Ç –æ–±–æ—Ä–æ—Ç–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π scale)
    fx_benefit_m = (client_data.get('transfer_fx_buy', 0) + client_data.get('transfer_fx_sell', 0)) / 100 * 0.005
    
    # 5) –î–µ–ø–æ–∑–∏—Ç—ã: 16.5/15.5/14.5% –≥–æ–¥–æ–≤—ã—Ö ‚Üí –≤ –º–µ—Å—è—Ü
    dep_savings_m = balance * 0.165 / 12
    dep_accum_m = balance * 0.155 / 12
    dep_multi_m = balance * 0.145 / 12
    
    # 6) –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: 0% –∫–æ–º–∏—Å—Å–∏–∏ 1 –≥–æ–¥, 8% –≥–æ–¥–æ–≤—ã—Ö –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ, –¥–æ 20% –±–∞–ª–∞–Ω—Å–∞ (cap 500k)
    invest_amount = min(balance * 0.2, 500000)
    invest_benefit_m = invest_amount * 0.08 / 12
    
    # 7) –ó–æ–ª–æ—Ç–æ: 4% –≥–æ–¥–æ–≤—ã—Ö (—É—Å–ª–æ–≤–Ω–æ), –≤ –º–µ—Å—è—Ü –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –¥–æ–ª—é
    gold_amount = min(balance * 0.15, 500000)
    gold_benefit_m = gold_amount * 0.04 / 12
    
    product_benefits_m = {
        '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π': max(travel_benefit_m, 50),
        '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': max(premium_benefit_m, 100),
        '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞': max(credit_benefit_m, 200),
        '–û–±–º–µ–Ω –≤–∞–ª—é—Ç': max(fx_benefit_m, 50),
        '–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π': dep_savings_m,
        '–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π': dep_accum_m,
        '–î–µ–ø–æ–∑–∏—Ç –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π': dep_multi_m,
        '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': max(invest_benefit_m, 100),
        '–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏': max(gold_benefit_m, 200)
    }
    
    return float(product_benefits_m.get(product, balance * 0.01 / 12))


def _get_top_spending_categories(client_data: pd.Series) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç –∫–ª–∏–µ–Ω—Ç–∞."""
    spend_columns = {col: client_data.get(col, 0) for col in client_data.index if col.startswith('spend_')}
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'spend_' –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    categories = [(col.replace('spend_', ''), amount) for col, amount in spend_columns.items()]
    categories.sort(key=lambda x: x[1], reverse=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    return [cat[0] for cat in categories if cat[1] > 0][:3]


def _get_product_emoji(product: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞."""
    emoji_map = {
        '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π': '‚úàÔ∏è',
        '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞': 'üíé',
        '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞': 'üí≥',
        '–û–±–º–µ–Ω –≤–∞–ª—é—Ç': 'üí±',
        '–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏': 'üí∞',
        '–î–µ–ø–æ–∑–∏—Ç –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π': 'üåç',
        '–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π': 'üè¶',
        '–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π': 'üìà',
        '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': 'üìä',
        '–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏': 'ü•á'
    }
    return emoji_map.get(product, 'üíº')


def _get_product_specific_context(client_data: pd.Series, product: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏."""
    context = {}
    
    if product == '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π':
        # üöÄ Ultra-–¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è travel –∫–∞—Ä—Ç—ã
        travel_spend = client_data.get('spend_–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', 0)
        taxi_spend = client_data.get('spend_–¢–∞–∫—Å–∏', 0)
        hotel_spend = client_data.get('spend_–û—Ç–µ–ª–∏', 0)
        total_travel_raw = taxi_spend + hotel_spend  # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        # üéØ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö push —Ç–µ–∫—Å—Ç–æ–≤!
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—É –∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —á—Ç–æ –∏ –≤ benefits: /3 (–º–µ—Å—è—Ü—ã) + /100 (scale)
        total_travel = total_travel_raw / 3 / 100  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã
        
        # üéØ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô —Ä–∞—Å—á–µ—Ç –ø–æ–µ–∑–¥–æ–∫ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        # –°—Ä–µ–¥–Ω—è—è –ø–æ–µ–∑–¥–∫–∞ –Ω–∞ —Ç–∞–∫—Å–∏: 3000‚Ç∏ 
        monthly_taxi_spend = (taxi_spend / 3 / 100) if taxi_spend > 0 else 0
        taxi_trips = max(1, int(monthly_taxi_spend / 3000)) if monthly_taxi_spend > 0 else 0
        
        # üéØ –¢–û–ß–ù–´–ô —Ä–∞—Å—á–µ—Ç –∫–µ—à–±—ç–∫–∞ –ø–æ –¢–ó: 4% * normalized spend
        potential_cashback = int(total_travel * 0.04)
        
        # üí∞ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–• —Å—É–º–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (–¢–ó)
        formatted_spend = _format_currency(total_travel)
        formatted_cashback = _format_currency(potential_cashback)
        
        context.update({
            'travel_spend': _format_currency(travel_spend),
            'taxi_spend': _format_currency(taxi_spend),
            'hotel_spend': _format_currency(hotel_spend),
            'total_travel_spend': formatted_spend,
            'potential_cashback': formatted_cashback,
            'cashback_rate': '4%',
            'trip_count': max(1, int(total_travel / 45000)) if total_travel > 0 else 0,  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ
            'taxi_trips': taxi_trips,  # –¢–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ
            'month': '–∏—é–Ω–µ'  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–æ–∑–∂–µ
        })
    
    elif product == '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞':
        balance = client_data.get('avg_monthly_balance_KZT', 0)
        restaurant_spend_raw = client_data.get('spend_–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', 0)
        jewelry_spend_raw = client_data.get('spend_–Æ–≤–µ–ª–∏—Ä–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è', 0)
        cosmetics_spend_raw = client_data.get('spend_–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ –ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è', 0)
        
        # üéØ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö push!
        restaurant_spend = restaurant_spend_raw / 3 / 100  # –ú–µ—Å—è—á–Ω—ã–µ + scale
        jewelry_spend = jewelry_spend_raw / 3 / 100
        cosmetics_spend = cosmetics_spend_raw / 3 / 100
        premium_spend = restaurant_spend + jewelry_spend + cosmetics_spend
        
        # –¢–ó: 2% –±–∞–∑–æ–≤—ã–π; 3% –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ 1‚Äì6 –º–ª–Ω ‚Ç∏; 4% –ø—Ä–∏ –¥–µ–ø–æ–∑–∏—Ç–µ –æ—Ç 6 –º–ª–Ω ‚Ç∏
        if balance >= 6000000:
            tier_cashback = 0.04
            tier = 'Platinum'
        elif balance >= 1000000:
            tier_cashback = 0.03
            tier = 'Gold'
        else:
            tier_cashback = 0.02
            tier = 'Base'
        potential_cashback = premium_spend * tier_cashback
        
        context.update({
            'tier': tier,
            'premium_spend': _format_currency(premium_spend),
            'restaurant_spend': _format_currency(restaurant_spend),
            'potential_cashback': _format_currency(potential_cashback),
            'tier_rate': f"{tier_cashback*100:.0f}%",
            'privileges': 'VIP-–∑–∞–ª—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤, –∫–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å'
        })
    
    elif product == '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞':
        # üéØ –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã!
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
        spend_categories_raw = {k.replace('spend_', ''): v for k, v in client_data.items() 
                               if k.startswith('spend_') and v > 0}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é /3 /100 –∫ each –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        spend_categories = {cat: amount / 3 / 100 for cat, amount in spend_categories_raw.items()}
        top_categories = sorted(spend_categories.items(), key=lambda x: x[1], reverse=True)[:3]
        
        online_spend_raw = (client_data.get('spend_–ï–¥–∏–º –¥–æ–º–∞', 0) + 
                           client_data.get('spend_–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞', 0) + 
                           client_data.get('spend_–ò–≥—Ä–∞–µ–º –¥–æ–º–∞', 0))
        online_spend = online_spend_raw / 3 / 100  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        
        top_spend = sum([amount for _, amount in top_categories])
        potential_cashback = top_spend * 0.10 + online_spend * 0.10
        
        context.update({
            'top_categories': [cat for cat, _ in top_categories],
            'top_spend': _format_currency(top_spend),
            'online_spend': _format_currency(online_spend),
            'potential_cashback': _format_currency(potential_cashback),
            'grace_period': '60 –¥–Ω–µ–π',
            'top_rate': '10%'
        })
    
    elif product == '–û–±–º–µ–Ω –≤–∞–ª—é—Ç':
        fx_buy_raw = client_data.get('transfer_fx_buy', 0)
        fx_sell_raw = client_data.get('transfer_fx_sell', 0)
        
        # üéØ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¥–ª—è FX –æ–ø–µ—Ä–∞—Ü–∏–π
        fx_buy = fx_buy_raw / 100  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è FX
        fx_sell = fx_sell_raw / 100
        fx_volume = fx_buy + fx_sell
        fx_savings = fx_volume * 0.005  # 0.5% —ç–∫–æ–Ω–æ–º–∏–∏
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É
        fx_curr = 'USD' if fx_buy > fx_sell else 'EUR' if fx_sell > 0 else 'USD'
        
        context.update({
            'fx_volume': _format_currency(fx_volume),
            'fx_buy': _format_currency(fx_buy),
            'fx_sell': _format_currency(fx_sell),
            'fx_savings': _format_currency(fx_savings),
            'fx_curr': fx_curr,
            'savings_rate': '0.5%'
        })
    
    elif product == '–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏':
        outflows = client_data.get('transfer_transfer_out', 0)
        inflows = client_data.get('transfer_transfer_in', 0)
        cash_deficit = max(0, outflows - inflows)
        
        context.update({
            'cash_deficit': _format_currency(cash_deficit),
            'interest_rate': '12%',
            'grace_period': '55 –¥–Ω–µ–π'
        })
    
    elif product in ['–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π', '–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π', '–î–µ–ø–æ–∑–∏—Ç –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π']:
        balance = client_data.get('avg_monthly_balance_KZT', 0)
        inflows = client_data.get('transfer_transfer_in', 0)
        outflows = client_data.get('transfer_transfer_out', 0)
        monthly_surplus = max(0, inflows - outflows)
        
        rate_map = {
            '–î–µ–ø–æ–∑–∏—Ç —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π': 0.165,
            '–î–µ–ø–æ–∑–∏—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π': 0.155, 
            '–î–µ–ø–æ–∑–∏—Ç –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π': 0.145
        }
        rate = rate_map.get(product, 0.06)
        annual_income = balance * rate
        monthly_income = annual_income / 12
        
        # –î–ª—è –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ–≥–æ - FX –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if product == '–î–µ–ø–æ–∑–∏—Ç –º—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π':
            fx_buy = client_data.get('transfer_fx_buy', 0)
            fx_sell = client_data.get('transfer_fx_sell', 0)
            fx_volume = _format_currency(fx_buy + fx_sell)
        else:
            fx_volume = '0 ‚Ç∏'
        fx_volume_raw = client_data.get('transfer_fx_buy', 0) + client_data.get('transfer_fx_sell', 0)
        
        context.update({
            'deposit_rate': f"{rate*100:.1f}%",
            'annual_income': _format_currency(annual_income),
            'monthly_income': _format_currency(monthly_income),
            'monthly_surplus': _format_currency(monthly_surplus),
            'deposit_amount': _format_currency(balance),
            'fx_volume': fx_volume,
            'fx_volume_raw': fx_volume_raw,
            'balance': _format_currency(balance),
            'min_amount': _format_currency(50000)
        })
    
    elif product == '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏':
        balance = client_data.get('avg_monthly_balance_KZT', 0)
        investment_amount = min(balance * 0.3, 500000)  # –î–æ 30% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        # –¢–ó: –ø–µ—Ä–≤—ã–π –≥–æ–¥ 0% –∫–æ–º–∏—Å—Å–∏–∏, —É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–∫–∞–∫ –≤ –¥–≤–∏–∂–∫–µ 8%)
        potential_return = investment_amount * 0.08
        
        context.update({
            'investment_amount': _format_currency(investment_amount),
            'potential_return': _format_currency(potential_return),
            'expected_return': '8%',
            'risk_level': '—É–º–µ—Ä–µ–Ω–Ω—ã–π',
            'min_investment': _format_currency(100000)
        })
    
    elif product == '–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏':
        balance = client_data.get('avg_monthly_balance_KZT', 0)
        gold_investment = min(balance * 0.2, 300000)  # –î–æ 20% –≤ –∑–æ–ª–æ—Ç–æ
        potential_return = gold_investment * 0.04
        
        context.update({
            'gold_investment': _format_currency(gold_investment),
            'potential_return': _format_currency(potential_return),
            'balance': _format_currency(balance),
            'gold_rate': '4%'
        })
    
    return context


def _format_currency(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç–Ω—É—é —Å—É–º–º—É."""
    if amount == 0:
        return '0 ‚Ç∏'
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    formatted = f"{amount:,.0f}".replace(',', ' ')
    return f"{formatted} ‚Ç∏"


def _postprocess_text(text: str, config: Dict[str, Any]) -> str:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = re.sub(r'\s+', ' ', text).strip()
    
    # –ú—è–≥–∫–∏–π –ø–∞–¥–¥–∏–Ω–≥ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
    MIN_LEN = 180
    MAX_LEN = config.get('MAX_PUSH_LEN', 220)
    if len(text) < MIN_LEN:
        filler = " –í—ã–≥–æ–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è, —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ, –≤—Å—ë –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"
        need = MIN_LEN - len(text)
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —á–∞—Å—Ç—å —Ñ–∏–ª–ª–µ—Ä–∞, –±–µ–∑ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        text = (text + (filler[:need] if need <= len(filler) else filler))[:MIN_LEN]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    if len(text) > MAX_LEN:
        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
        sentences = text.split('.')
        truncated = ''
        for sentence in sentences:
            if len(truncated + sentence + '.') <= MAX_LEN:
                truncated += sentence + '.'
            else:
                break
        text = truncated.rstrip('.')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ CAPS (–Ω–µ –±–æ–ª–µ–µ 10% –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤)
    letter_count = sum(1 for c in text if c.isalpha())
    caps_count = sum(1 for c in text if c.isupper())
    if letter_count > 0 and caps_count / letter_count > 0.1:
        text = text.lower().capitalize()
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
    text = re.sub(r'!{2,}', '!', text)
    
    return text


def _get_default_template() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 180-220 —Å–∏–º–≤–æ–ª–æ–≤."""
    return """{{ name }}, –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! {{ emoji }} 
{{ product }} –ø—Ä–∏–Ω–µ—Å—ë—Ç –≤—ã–≥–æ–¥—É {{ benefit }} –≤ {{ month }}. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ - –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã–≥–æ–¥—É. –û—Ñ–æ—Ä–º–∏—Ç—å?"""


def _generate_fallback_text(client_data: pd.Series, product: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 180-220 —Å–∏–º–≤–æ–ª–æ–≤."""
    name = client_data.get('name', '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç')
    first_name = name.split()[0] if name and ' ' in name else '–ö–ª–∏–µ–Ω—Ç'
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ fallback —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    if product == '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞':
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        spend_categories = {k.replace('spend_', ''): v/3/100 for k, v in client_data.items() 
                           if k.startswith('spend_') and v > 0}
        top_cats = sorted(spend_categories.items(), key=lambda x: x[1], reverse=True)[:2]
        if top_cats:
            cat_text = ', '.join([cat for cat, _ in top_cats])
            total_spend = sum([amount for _, amount in top_cats])
            return f"{first_name}, –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî {cat_text} ({_format_currency(total_spend)}). –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞: 10% –∫–µ—à–±—ç–∫ + —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –±–µ–∑ %. –û—Ñ–æ—Ä–º–∏—Ç—å –∫–∞—Ä—Ç—É?"
    elif product == '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞':
        balance = client_data.get('avg_monthly_balance_KZT', 0)
        return f"{first_name}, —É –≤–∞—Å Gold —Å—Ç–∞—Ç—É—Å –∏ {_format_currency(balance/100)} –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö/—à–æ–ø–∏–Ω–≥–µ. –ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞: 2% –∫–µ—à–±—ç–∫ + VIP-–∑–∞–ª—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç—å?"
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    return f"{first_name}, –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–∫–∞–∑–∞–ª –æ—Ç–ª–∏—á–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! {product} –ø—Ä–∏–Ω–µ—Å—ë—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é –≤—ã–≥–æ–¥—É. –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ - –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ. –£–∑–Ω–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!"


def test_generate_push_text():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
        test_client = pd.Series({
            'client_code': 1,
            'name': '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
            'age': 35,
            'status': '–†–∞–±–æ—Ç–∞—é—â–∏–π',
            'city': '–ê–ª–º–∞—Ç—ã',
            'avg_monthly_balance_KZT': 500000,
            'spend_–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 30000,
            'spend_–¢–∞–∫—Å–∏': 10000,
            'spend_–†–µ—Å—Ç–æ—Ä–∞–Ω': 20000,
            'month': '–°–µ–Ω—Ç—è–±—Ä—å'
        })
        
        test_config = CONFIG.__dict__
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        test_products = ['–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞', '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞']
        
        for product in test_products:
            text = generate_push_text(test_client, product, test_config)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            assert len(text) <= test_config['MAX_PUSH_LEN'], f"–¢–µ–∫—Å—Ç –¥–ª—è {product} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(text)}"
            assert product in text, f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è {product}"
            assert text.count('!') <= 1, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è {product}"
            
            logger.info(f"–¢–µ—Å—Ç –¥–ª—è {product}: {text}")
        
        print("–¢–µ—Å—Ç generate_push_text –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"–¢–µ—Å—Ç generate_push_text –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")


def _format_money_filter(amount):
    """üöÄ Ultra-–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥."""
    if amount is None:
        return "0 ‚Ç∏"
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(amount, str):
            amount = float(amount.replace(' ', '').replace('‚Ç∏', '').replace(',', ''))
        
        amount = int(float(amount))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Ä–∞–∑—Ä—è–¥–∞–º–∏
        formatted = f"{amount:,}".replace(',', ' ')
        return f"{formatted} ‚Ç∏"
        
    except (ValueError, TypeError):
        return f"{amount} ‚Ç∏"


if __name__ == "__main__":
    test_generate_push_text()